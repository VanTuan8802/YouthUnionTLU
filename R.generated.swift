//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: OK
      ///
      /// Key: button.Ok
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonOk: RswiftResources.StringResource { .init(key: "button.Ok", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: Cancle
      ///
      /// Key: button.cancle
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonCancle: RswiftResources.StringResource { .init(key: "button.cancle", tableName: "Localizable", source: source, developmentValue: "Cancle", comment: nil) }

      /// en translation: Cambodian
      ///
      /// Key: language.cam
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageCam: RswiftResources.StringResource { .init(key: "language.cam", tableName: "Localizable", source: source, developmentValue: "Cambodian", comment: nil) }

      /// en translation: English
      ///
      /// Key: language.eng
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageEng: RswiftResources.StringResource { .init(key: "language.eng", tableName: "Localizable", source: source, developmentValue: "English", comment: nil) }

      /// en translation: French
      ///
      /// Key: language.fre
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageFre: RswiftResources.StringResource { .init(key: "language.fre", tableName: "Localizable", source: source, developmentValue: "French", comment: nil) }

      /// en translation: Laos
      ///
      /// Key: language.lao
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageLao: RswiftResources.StringResource { .init(key: "language.lao", tableName: "Localizable", source: source, developmentValue: "Laos", comment: nil) }

      /// en translation: Language
      ///
      /// Key: language.title
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageTitle: RswiftResources.StringResource { .init(key: "language.title", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: VietNames
      ///
      /// Key: language.vie
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageVie: RswiftResources.StringResource { .init(key: "language.vie", tableName: "Localizable", source: source, developmentValue: "VietNames", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: permission.camera
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionCamera: RswiftResources.StringResource { .init(key: "permission.camera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: App requires permission to use the device’s camera, folder and notifications
      ///
      /// Key: permission.content
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionContent: RswiftResources.StringResource { .init(key: "permission.content", tableName: "Localizable", source: source, developmentValue: "App requires permission to use the device’s camera, folder and notifications", comment: nil) }

      /// en translation: Notifications
      ///
      /// Key: permission.notifications
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionNotifications: RswiftResources.StringResource { .init(key: "permission.notifications", tableName: "Localizable", source: source, developmentValue: "Notifications", comment: nil) }

      /// en translation: Photos
      ///
      /// Key: permission.photos
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionPhotos: RswiftResources.StringResource { .init(key: "permission.photos", tableName: "Localizable", source: source, developmentValue: "Photos", comment: nil) }

      /// en translation: Permission
      ///
      /// Key: permission.title
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionTitle: RswiftResources.StringResource { .init(key: "permission.title", tableName: "Localizable", source: source, developmentValue: "Permission", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `2D3BB6`.
    var d3BB6: RswiftResources.ColorResource { .init(name: "2D3BB6", path: [], bundle: bundle) }

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 8 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Cambodian`.
    var cambodian: RswiftResources.ImageResource { .init(name: "Cambodian", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `English`.
    var english: RswiftResources.ImageResource { .init(name: "English", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `French`.
    var french: RswiftResources.ImageResource { .init(name: "French", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Laos`.
    var laos: RswiftResources.ImageResource { .init(name: "Laos", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `VietNam`.
    var vietNam: RswiftResources.ImageResource { .init(name: "VietNam", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `check`.
    var check: RswiftResources.ImageResource { .init(name: "check", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `permission`.
    var permission: RswiftResources.ImageResource { .init(name: "permission", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash`.
    var splash: RswiftResources.ImageResource { .init(name: "splash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `LanguageTableViewCell`.
    var languageTableViewCell: RswiftResources.NibReference<LanguageTableViewCell> { .init(name: "LanguageTableViewCell", bundle: bundle) }

    func validate() throws {

    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var languageViewController: languageViewController { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var permissionViewController: permissionViewController { .init(bundle: bundle) }
    var splashViewController: splashViewController { .init(bundle: bundle) }

    func languageViewController(bundle: Foundation.Bundle) -> languageViewController {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func permissionViewController(bundle: Foundation.Bundle) -> permissionViewController {
      .init(bundle: bundle)
    }
    func splashViewController(bundle: Foundation.Bundle) -> splashViewController {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.languageViewController.validate()
      try self.launchScreen.validate()
      try self.permissionViewController.validate()
      try self.splashViewController.validate()
    }


    /// Storyboard `LanguageViewController`.
    struct languageViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = LanguageViewController

      let bundle: Foundation.Bundle

      let name = "LanguageViewController"

      var languageViewController: RswiftResources.StoryboardViewControllerIdentifier<LanguageViewController> { .init(identifier: "LanguageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "check", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'check' is used in storyboard 'LanguageViewController', but couldn't be loaded.") }
        if languageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'languageViewController' could not be loaded from storyboard 'LanguageViewController' as 'LanguageViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `PermissionViewController`.
    struct permissionViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = PermissionViewController

      let bundle: Foundation.Bundle

      let name = "PermissionViewController"

      var permissionViewController: RswiftResources.StoryboardViewControllerIdentifier<PermissionViewController> { .init(identifier: "PermissionViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "permission", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'permission' is used in storyboard 'PermissionViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "253590", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '253590' is used in storyboard 'PermissionViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "2D3BB6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '2D3BB6' is used in storyboard 'PermissionViewController', but couldn't be loaded.") }
        if permissionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'permissionViewController' could not be loaded from storyboard 'PermissionViewController' as 'PermissionViewController'.") }
      }
    }

    /// Storyboard `SplashViewController`.
    struct splashViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SplashViewController

      let bundle: Foundation.Bundle

      let name = "SplashViewController"

      var splashViewController: RswiftResources.StoryboardViewControllerIdentifier<SplashViewController> { .init(identifier: "SplashViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "253590", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '253590' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "2D3BB6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '2D3BB6' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if splashViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'SplashViewController' as 'SplashViewController'.") }
      }
    }
  }
}