//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 31 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: OK
      ///
      /// Key: button.Ok
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonOk: RswiftResources.StringResource { .init(key: "button.Ok", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: Back to login
      ///
      /// Key: button.backLogin
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonBackLogin: RswiftResources.StringResource { .init(key: "button.backLogin", tableName: "Localizable", source: source, developmentValue: "Back to login", comment: nil) }

      /// en translation: Cancle
      ///
      /// Key: button.cancle
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonCancle: RswiftResources.StringResource { .init(key: "button.cancle", tableName: "Localizable", source: source, developmentValue: "Cancle", comment: nil) }

      /// en translation: Forgot Password
      ///
      /// Key: button.forgotPassword
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonForgotPassword: RswiftResources.StringResource { .init(key: "button.forgotPassword", tableName: "Localizable", source: source, developmentValue: "Forgot Password", comment: nil) }

      /// en translation: Go
      ///
      /// Key: button.go
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonGo: RswiftResources.StringResource { .init(key: "button.go", tableName: "Localizable", source: source, developmentValue: "Go", comment: nil) }

      /// en translation: Reset my password
      ///
      /// Key: button.resetPassword
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonResetPassword: RswiftResources.StringResource { .init(key: "button.resetPassword", tableName: "Localizable", source: source, developmentValue: "Reset my password", comment: nil) }

      /// en translation: Sign In
      ///
      /// Key: button.signIn
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var buttonSignIn: RswiftResources.StringResource { .init(key: "button.signIn", tableName: "Localizable", source: source, developmentValue: "Sign In", comment: nil) }

      /// en translation: The e-mail you have entered is incorrect.
      ///
      /// Key: error.email.message
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorEmailMessage: RswiftResources.StringResource { .init(key: "error.email.message", tableName: "Localizable", source: source, developmentValue: "The e-mail you have entered is incorrect.", comment: nil) }

      /// en translation: Email is required
      ///
      /// Key: error.email.messageRequire
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorEmailMessageRequire: RswiftResources.StringResource { .init(key: "error.email.messageRequire", tableName: "Localizable", source: source, developmentValue: "Email is required", comment: nil) }

      /// en translation: Invalid Email
      ///
      /// Key: error.email.title
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorEmailTitle: RswiftResources.StringResource { .init(key: "error.email.title", tableName: "Localizable", source: source, developmentValue: "Invalid Email", comment: nil) }

      /// en translation: Incorrect login credentials.
      ///
      /// Key: error.login.message
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorLoginMessage: RswiftResources.StringResource { .init(key: "error.login.message", tableName: "Localizable", source: source, developmentValue: "Incorrect login credentials.", comment: nil) }

      /// en translation: Password must be at least 8 characters without spaces
      ///
      /// Key: error.password.message
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorPasswordMessage: RswiftResources.StringResource { .init(key: "error.password.message", tableName: "Localizable", source: source, developmentValue: "Password must be at least 8 characters without spaces", comment: nil) }

      /// en translation: Password is required
      ///
      /// Key: error.password.messageRequire
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorPasswordMessageRequire: RswiftResources.StringResource { .init(key: "error.password.messageRequire", tableName: "Localizable", source: source, developmentValue: "Password is required", comment: nil) }

      /// en translation: Invalid Password
      ///
      /// Key: error.password.title
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var errorPasswordTitle: RswiftResources.StringResource { .init(key: "error.password.title", tableName: "Localizable", source: source, developmentValue: "Invalid Password", comment: nil) }

      /// en translation: An email has been sent to you. Please click on the link to reset your password.
      ///
      /// Key: lable.sendEmail
      ///
      /// Locales: en
      var lableSendEmail: RswiftResources.StringResource { .init(key: "lable.sendEmail", tableName: "Localizable", source: source, developmentValue: "An email has been sent to you. Please click on the link to reset your password.", comment: nil) }

      /// en translation: Cambodian
      ///
      /// Key: language.cam
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageCam: RswiftResources.StringResource { .init(key: "language.cam", tableName: "Localizable", source: source, developmentValue: "Cambodian", comment: nil) }

      /// en translation: English
      ///
      /// Key: language.eng
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageEng: RswiftResources.StringResource { .init(key: "language.eng", tableName: "Localizable", source: source, developmentValue: "English", comment: nil) }

      /// en translation: French
      ///
      /// Key: language.fre
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageFre: RswiftResources.StringResource { .init(key: "language.fre", tableName: "Localizable", source: source, developmentValue: "French", comment: nil) }

      /// en translation: Laos
      ///
      /// Key: language.lao
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageLao: RswiftResources.StringResource { .init(key: "language.lao", tableName: "Localizable", source: source, developmentValue: "Laos", comment: nil) }

      /// en translation: Language
      ///
      /// Key: language.title
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageTitle: RswiftResources.StringResource { .init(key: "language.title", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: VietNames
      ///
      /// Key: language.vie
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var languageVie: RswiftResources.StringResource { .init(key: "language.vie", tableName: "Localizable", source: source, developmentValue: "VietNames", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: permission.camera
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionCamera: RswiftResources.StringResource { .init(key: "permission.camera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: App requires permission to use the device’s camera, folder and notifications
      ///
      /// Key: permission.content
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionContent: RswiftResources.StringResource { .init(key: "permission.content", tableName: "Localizable", source: source, developmentValue: "App requires permission to use the device’s camera, folder and notifications", comment: nil) }

      /// en translation: Notifications
      ///
      /// Key: permission.notifications
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionNotifications: RswiftResources.StringResource { .init(key: "permission.notifications", tableName: "Localizable", source: source, developmentValue: "Notifications", comment: nil) }

      /// en translation: Photos
      ///
      /// Key: permission.photos
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionPhotos: RswiftResources.StringResource { .init(key: "permission.photos", tableName: "Localizable", source: source, developmentValue: "Photos", comment: nil) }

      /// en translation: Permission
      ///
      /// Key: permission.title
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var permissionTitle: RswiftResources.StringResource { .init(key: "permission.title", tableName: "Localizable", source: source, developmentValue: "Permission", comment: nil) }

      /// en translation: Home
      ///
      /// Key: tabBar.home
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var tabBarHome: RswiftResources.StringResource { .init(key: "tabBar.home", tableName: "Localizable", source: source, developmentValue: "Home", comment: nil) }

      /// en translation: Search
      ///
      /// Key: tabBar.search
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var tabBarSearch: RswiftResources.StringResource { .init(key: "tabBar.search", tableName: "Localizable", source: source, developmentValue: "Search", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: tabBar.settings
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var tabBarSettings: RswiftResources.StringResource { .init(key: "tabBar.settings", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: Enter E-mail
      ///
      /// Key: textField.email
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var textFieldEmail: RswiftResources.StringResource { .init(key: "textField.email", tableName: "Localizable", source: source, developmentValue: "Enter E-mail", comment: nil) }

      /// en translation: Enter Password
      ///
      /// Key: textField.password
      ///
      /// Locales: en, fr, km-KH, lo-LA, vi
      var textFieldPassword: RswiftResources.StringResource { .init(key: "textField.password", tableName: "Localizable", source: source, developmentValue: "Enter Password", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `2D3BB6`.
    var d3BB6: RswiftResources.ColorResource { .init(name: "2D3BB6", path: [], bundle: bundle) }

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 18 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Cambodian`.
    var cambodian: RswiftResources.ImageResource { .init(name: "Cambodian", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `English`.
    var english: RswiftResources.ImageResource { .init(name: "English", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `French`.
    var french: RswiftResources.ImageResource { .init(name: "French", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Laos`.
    var laos: RswiftResources.ImageResource { .init(name: "Laos", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `VietNam`.
    var vietNam: RswiftResources.ImageResource { .init(name: "VietNam", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `check`.
    var check: RswiftResources.ImageResource { .init(name: "check", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye`.
    var eye: RswiftResources.ImageResource { .init(name: "eye", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye-slash`.
    var eyeSlash: RswiftResources.ImageResource { .init(name: "eye-slash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `forgotpassword`.
    var forgotpassword: RswiftResources.ImageResource { .init(name: "forgotpassword", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home`.
    var home: RswiftResources.ImageResource { .init(name: "home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `homeSelected`.
    var homeSelected: RswiftResources.ImageResource { .init(name: "homeSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login`.
    var login: RswiftResources.ImageResource { .init(name: "login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `permission`.
    var permission: RswiftResources.ImageResource { .init(name: "permission", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search`.
    var search: RswiftResources.ImageResource { .init(name: "search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchSelected`.
    var searchSelected: RswiftResources.ImageResource { .init(name: "searchSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting`.
    var setting: RswiftResources.ImageResource { .init(name: "setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settingSelected`.
    var settingSelected: RswiftResources.ImageResource { .init(name: "settingSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash`.
    var splash: RswiftResources.ImageResource { .init(name: "splash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `LanguageTableViewCell`.
    var languageTableViewCell: RswiftResources.NibReference<LanguageTableViewCell> { .init(name: "LanguageTableViewCell", bundle: bundle) }

    func validate() throws {

    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var forgotPasswordViewController: forgotPasswordViewController { .init(bundle: bundle) }
    var homeTabBarViewController: homeTabBarViewController { .init(bundle: bundle) }
    var languageViewController: languageViewController { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var loginViewController: loginViewController { .init(bundle: bundle) }
    var permissionViewController: permissionViewController { .init(bundle: bundle) }
    var searchTabBarViewController: searchTabBarViewController { .init(bundle: bundle) }
    var settingTabBarViewController: settingTabBarViewController { .init(bundle: bundle) }
    var splashViewController: splashViewController { .init(bundle: bundle) }

    func forgotPasswordViewController(bundle: Foundation.Bundle) -> forgotPasswordViewController {
      .init(bundle: bundle)
    }
    func homeTabBarViewController(bundle: Foundation.Bundle) -> homeTabBarViewController {
      .init(bundle: bundle)
    }
    func languageViewController(bundle: Foundation.Bundle) -> languageViewController {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func loginViewController(bundle: Foundation.Bundle) -> loginViewController {
      .init(bundle: bundle)
    }
    func permissionViewController(bundle: Foundation.Bundle) -> permissionViewController {
      .init(bundle: bundle)
    }
    func searchTabBarViewController(bundle: Foundation.Bundle) -> searchTabBarViewController {
      .init(bundle: bundle)
    }
    func settingTabBarViewController(bundle: Foundation.Bundle) -> settingTabBarViewController {
      .init(bundle: bundle)
    }
    func splashViewController(bundle: Foundation.Bundle) -> splashViewController {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.forgotPasswordViewController.validate()
      try self.homeTabBarViewController.validate()
      try self.languageViewController.validate()
      try self.launchScreen.validate()
      try self.loginViewController.validate()
      try self.permissionViewController.validate()
      try self.searchTabBarViewController.validate()
      try self.settingTabBarViewController.validate()
      try self.splashViewController.validate()
    }


    /// Storyboard `ForgotPasswordViewController`.
    struct forgotPasswordViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ForgotPasswordViewController

      let bundle: Foundation.Bundle

      let name = "ForgotPasswordViewController"

      var forgotPasswordViewController: RswiftResources.StoryboardViewControllerIdentifier<ForgotPasswordViewController> { .init(identifier: "ForgotPasswordViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "forgotpassword", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'forgotpassword' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "2D3BB6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '2D3BB6' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
        if forgotPasswordViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgotPasswordViewController' as 'ForgotPasswordViewController'.") }
      }
    }

    /// Storyboard `HomeTabBarViewController`.
    struct homeTabBarViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = HomeTabBarViewController

      let bundle: Foundation.Bundle

      let name = "HomeTabBarViewController"

      var homeTabBarViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeTabBarViewController> { .init(identifier: "HomeTabBarViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "homeSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'homeSelected' is used in storyboard 'HomeTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search' is used in storyboard 'HomeTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'setting' is used in storyboard 'HomeTabBarViewController', but couldn't be loaded.") }
        if homeTabBarViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeTabBarViewController' could not be loaded from storyboard 'HomeTabBarViewController' as 'HomeTabBarViewController'.") }
      }
    }

    /// Storyboard `LanguageViewController`.
    struct languageViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = LanguageViewController

      let bundle: Foundation.Bundle

      let name = "LanguageViewController"

      var languageViewController: RswiftResources.StoryboardViewControllerIdentifier<LanguageViewController> { .init(identifier: "LanguageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "check", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'check' is used in storyboard 'LanguageViewController', but couldn't be loaded.") }
        if languageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'languageViewController' could not be loaded from storyboard 'LanguageViewController' as 'LanguageViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `LoginViewController`.
    struct loginViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = LoginViewController

      let bundle: Foundation.Bundle

      let name = "LoginViewController"

      var loginViewController: RswiftResources.StoryboardViewControllerIdentifier<LoginViewController> { .init(identifier: "LoginViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "eye", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'eye' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'login' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "2D3BB6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '2D3BB6' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if loginViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginViewController' as 'LoginViewController'.") }
      }
    }

    /// Storyboard `PermissionViewController`.
    struct permissionViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = PermissionViewController

      let bundle: Foundation.Bundle

      let name = "PermissionViewController"

      var permissionViewController: RswiftResources.StoryboardViewControllerIdentifier<PermissionViewController> { .init(identifier: "PermissionViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "permission", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'permission' is used in storyboard 'PermissionViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "253590", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '253590' is used in storyboard 'PermissionViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "2D3BB6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '2D3BB6' is used in storyboard 'PermissionViewController', but couldn't be loaded.") }
        if permissionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'permissionViewController' could not be loaded from storyboard 'PermissionViewController' as 'PermissionViewController'.") }
      }
    }

    /// Storyboard `SearchTabBarViewController`.
    struct searchTabBarViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SearchTabBarViewController

      let bundle: Foundation.Bundle

      let name = "SearchTabBarViewController"

      var searchTabBarViewController: RswiftResources.StoryboardViewControllerIdentifier<SearchTabBarViewController> { .init(identifier: "SearchTabBarViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home' is used in storyboard 'SearchTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "homeSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'homeSelected' is used in storyboard 'SearchTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'searchSelected' is used in storyboard 'SearchTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'setting' is used in storyboard 'SearchTabBarViewController', but couldn't be loaded.") }
        if searchTabBarViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchTabBarViewController' could not be loaded from storyboard 'SearchTabBarViewController' as 'SearchTabBarViewController'.") }
      }
    }

    /// Storyboard `SettingTabBarViewController`.
    struct settingTabBarViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SettingTabBarViewController

      let bundle: Foundation.Bundle

      let name = "SettingTabBarViewController"

      var settingTabBarViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingTabBarViewController> { .init(identifier: "SettingTabBarViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home' is used in storyboard 'SettingTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search' is used in storyboard 'SettingTabBarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settingSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'settingSelected' is used in storyboard 'SettingTabBarViewController', but couldn't be loaded.") }
        if settingTabBarViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingTabBarViewController' could not be loaded from storyboard 'SettingTabBarViewController' as 'SettingTabBarViewController'.") }
      }
    }

    /// Storyboard `SplashViewController`.
    struct splashViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SplashViewController

      let bundle: Foundation.Bundle

      let name = "SplashViewController"

      var splashViewController: RswiftResources.StoryboardViewControllerIdentifier<SplashViewController> { .init(identifier: "SplashViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "253590", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '253590' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "2D3BB6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '2D3BB6' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if splashViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'SplashViewController' as 'SplashViewController'.") }
      }
    }
  }
}